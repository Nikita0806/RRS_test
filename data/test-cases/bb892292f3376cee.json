{
  "uid" : "bb892292f3376cee",
  "name" : "Admin test",
  "fullName" : "tests.test_rrs_admin.TestAdmin#test_login",
  "historyId" : "275dd22749e08fb0da5462ae99fdae0b",
  "time" : {
    "start" : 1709543077004,
    "stop" : 1709543101953,
    "duration" : 24949
  },
  "status" : "broken",
  "statusMessage" : "FileNotFoundError: [Errno 2] No such file or directory: 'dumpkeys'",
  "statusTrace" : "self = <test_rrs_admin.TestAdmin object at 0x7fa3f744e360>\n\n    @allure.title(\"Admin test\")\n    @allure.severity(\"Medium\")\n    @pytest.mark.smoke\n    def test_login(self):\n        self.rrs_admin.open()                               # открытие страницы\n        self.rrs_admin.enter_login(self.data.LOGIN_A)         # ввод логина\n        self.rrs_admin.enter_password(self.data.PASSWORD_A)   # ввод пароля\n        self.rrs_admin.click_submit_button()                # нажатие на кнопку входа\n        self.rrs_admin.drop_down_list()                     # нажатие на выпадающий список\n        self.rrs_admin.report()                             # нажатие на отчет\n        self.rrs_admin.suppliers_report()                   # выбор нужного отчета\n        self.rrs_admin.add_report()                         # создание нового отчета\n        self.rrs_admin.data_input_start('01.02.2024')           # ввод даты\n        self.rrs_admin.timer_enter_start()                  # выбор времени\n        self.rrs_admin.data_input_end('29.02.2024')          # ввод даты\n        self.rrs_admin.timer_enter_and()                    # выбор времени\n        self.rrs_admin.scrol_down()                         # скролл\n        self.rrs_admin.suppliers_all()                      # все поставщики\n        self.rrs_admin.enter_report()                       # нажатие формирование отчета\n        self.rrs_admin.spiner()                             # ожидание когда пропадёт спинер\n        self.rrs_admin.scrol_down()                         # скролл вниз\n        self.rrs_admin.make_screenshot(\"Screenshot\")\n        self.rrs_admin.export()                             # нажатие на экспорт\n>       self.rrs_admin.enter()                              # нажатие на enter\n\ntests/test_rrs_admin.py:31: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npages/admin_pg.py:114: in enter\n    keyboard.press('enter')\n../local/lib/python3.12/site-packages/keyboard/__init__.py:396: in press\n    send(hotkey, True, False)\n../local/lib/python3.12/site-packages/keyboard/__init__.py:379: in send\n    parsed = parse_hotkey(hotkey)\n../local/lib/python3.12/site-packages/keyboard/__init__.py:358: in parse_hotkey\n    steps.append(tuple(key_to_scan_codes(key) for key in keys))\n../local/lib/python3.12/site-packages/keyboard/__init__.py:358: in <genexpr>\n    steps.append(tuple(key_to_scan_codes(key) for key in keys))\n../local/lib/python3.12/site-packages/keyboard/__init__.py:317: in key_to_scan_codes\n    t = tuple(_collections.OrderedDict((scan_code, True) for scan_code, modifier in _os_keyboard.map_name(normalized)))\n../local/lib/python3.12/site-packages/keyboard/__init__.py:317: in <genexpr>\n    t = tuple(_collections.OrderedDict((scan_code, True) for scan_code, modifier in _os_keyboard.map_name(normalized)))\n../local/lib/python3.12/site-packages/keyboard/_nixkeyboard.py:148: in map_name\n    build_tables()\n../local/lib/python3.12/site-packages/keyboard/_nixkeyboard.py:73: in build_tables\n    dump = check_output(['dumpkeys', '--keys-only'], universal_newlines=True)\n../local/lib/python3.12/subprocess.py:466: in check_output\n    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n../local/lib/python3.12/subprocess.py:548: in run\n    with Popen(*popenargs, **kwargs) as process:\n../local/lib/python3.12/subprocess.py:1024: in __init__\n    self._execute_child(args, executable, preexec_fn, close_fds,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Popen: returncode: 255 args: ['dumpkeys', '--keys-only']>\nargs = ['dumpkeys', '--keys-only'], executable = b'dumpkeys', preexec_fn = None\nclose_fds = True, pass_fds = (), cwd = None, env = None, startupinfo = None\ncreationflags = 0, shell = False, p2cread = -1, p2cwrite = -1, c2pread = 7\nc2pwrite = 8, errread = -1, errwrite = -1, restore_signals = True, gid = None\ngids = None, uid = None, umask = -1, start_new_session = False\nprocess_group = -1\n\n    def _execute_child(self, args, executable, preexec_fn, close_fds,\n                       pass_fds, cwd, env,\n                       startupinfo, creationflags, shell,\n                       p2cread, p2cwrite,\n                       c2pread, c2pwrite,\n                       errread, errwrite,\n                       restore_signals,\n                       gid, gids, uid, umask,\n                       start_new_session, process_group):\n        \"\"\"Execute program (POSIX version)\"\"\"\n    \n        if isinstance(args, (str, bytes)):\n            args = [args]\n        elif isinstance(args, os.PathLike):\n            if shell:\n                raise TypeError('path-like args is not allowed when '\n                                'shell is true')\n            args = [args]\n        else:\n            args = list(args)\n    \n        if shell:\n            # On Android the default shell is at '/system/bin/sh'.\n            unix_shell = ('/system/bin/sh' if\n                      hasattr(sys, 'getandroidapilevel') else '/bin/sh')\n            args = [unix_shell, \"-c\"] + args\n            if executable:\n                args[0] = executable\n    \n        if executable is None:\n            executable = args[0]\n    \n        sys.audit(\"subprocess.Popen\", executable, args, cwd, env)\n    \n        if (_USE_POSIX_SPAWN\n                and os.path.dirname(executable)\n                and preexec_fn is None\n                and not close_fds\n                and not pass_fds\n                and cwd is None\n                and (p2cread == -1 or p2cread > 2)\n                and (c2pwrite == -1 or c2pwrite > 2)\n                and (errwrite == -1 or errwrite > 2)\n                and not start_new_session\n                and process_group == -1\n                and gid is None\n                and gids is None\n                and uid is None\n                and umask < 0):\n            self._posix_spawn(args, executable, env, restore_signals,\n                              p2cread, p2cwrite,\n                              c2pread, c2pwrite,\n                              errread, errwrite)\n            return\n    \n        orig_executable = executable\n    \n        # For transferring possible exec failure from child to parent.\n        # Data format: \"exception name:hex errno:description\"\n        # Pickle is not used; it is complex and involves memory allocation.\n        errpipe_read, errpipe_write = os.pipe()\n        # errpipe_write must not be in the standard io 0, 1, or 2 fd range.\n        low_fds_to_close = []\n        while errpipe_write < 3:\n            low_fds_to_close.append(errpipe_write)\n            errpipe_write = os.dup(errpipe_write)\n        for low_fd in low_fds_to_close:\n            os.close(low_fd)\n        try:\n            try:\n                # We must avoid complex work that could involve\n                # malloc or free in the child process to avoid\n                # potential deadlocks, thus we do all this here.\n                # and pass it to fork_exec()\n    \n                if env is not None:\n                    env_list = []\n                    for k, v in env.items():\n                        k = os.fsencode(k)\n                        if b'=' in k:\n                            raise ValueError(\"illegal environment variable name\")\n                        env_list.append(k + b'=' + os.fsencode(v))\n                else:\n                    env_list = None  # Use execv instead of execve.\n                executable = os.fsencode(executable)\n                if os.path.dirname(executable):\n                    executable_list = (executable,)\n                else:\n                    # This matches the behavior of os._execvpe().\n                    executable_list = tuple(\n                        os.path.join(os.fsencode(dir), executable)\n                        for dir in os.get_exec_path(env))\n                fds_to_keep = set(pass_fds)\n                fds_to_keep.add(errpipe_write)\n                self.pid = _fork_exec(\n                        args, executable_list,\n                        close_fds, tuple(sorted(map(int, fds_to_keep))),\n                        cwd, env_list,\n                        p2cread, p2cwrite, c2pread, c2pwrite,\n                        errread, errwrite,\n                        errpipe_read, errpipe_write,\n                        restore_signals, start_new_session,\n                        process_group, gid, gids, uid, umask,\n                        preexec_fn, _USE_VFORK)\n                self._child_created = True\n            finally:\n                # be sure the FD is closed no matter what\n                os.close(errpipe_write)\n    \n            self._close_pipe_fds(p2cread, p2cwrite,\n                                 c2pread, c2pwrite,\n                                 errread, errwrite)\n    \n            # Wait for exec to fail or succeed; possibly raising an\n            # exception (limited in size)\n            errpipe_data = bytearray()\n            while True:\n                part = os.read(errpipe_read, 50000)\n                errpipe_data += part\n                if not part or len(errpipe_data) > 50000:\n                    break\n        finally:\n            # be sure the FD is closed no matter what\n            os.close(errpipe_read)\n    \n        if errpipe_data:\n            try:\n                pid, sts = os.waitpid(self.pid, 0)\n                if pid == self.pid:\n                    self._handle_exitstatus(sts)\n                else:\n                    self.returncode = sys.maxsize\n            except ChildProcessError:\n                pass\n    \n            try:\n                exception_name, hex_errno, err_msg = (\n                        errpipe_data.split(b':', 2))\n                # The encoding here should match the encoding\n                # written in by the subprocess implementations\n                # like _posixsubprocess\n                err_msg = err_msg.decode()\n            except ValueError:\n                exception_name = b'SubprocessError'\n                hex_errno = b'0'\n                err_msg = 'Bad exception data from child: {!r}'.format(\n                              bytes(errpipe_data))\n            child_exception_type = getattr(\n                    builtins, exception_name.decode('ascii'),\n                    SubprocessError)\n            if issubclass(child_exception_type, OSError) and hex_errno:\n                errno_num = int(hex_errno, 16)\n                child_exec_never_called = (err_msg == \"noexec\")\n                if child_exec_never_called:\n                    err_msg = \"\"\n                    # The error must be from chdir(cwd).\n                    err_filename = cwd\n                else:\n                    err_filename = orig_executable\n                if errno_num != 0:\n                    err_msg = os.strerror(errno_num)\n>               raise child_exception_type(errno_num, err_msg, err_filename)\nE               FileNotFoundError: [Errno 2] No such file or directory: 'dumpkeys'\n\n../local/lib/python3.12/subprocess.py:1901: FileNotFoundError",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "setup",
    "time" : {
      "start" : 1709543077003,
      "stop" : 1709543077003,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "stepsCount" : 0,
    "hasContent" : false
  }, {
    "name" : "driver",
    "time" : {
      "start" : 1709543076613,
      "stop" : 1709543077003,
      "duration" : 390
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "stepsCount" : 0,
    "hasContent" : false
  } ],
  "testStage" : {
    "status" : "broken",
    "statusMessage" : "FileNotFoundError: [Errno 2] No such file or directory: 'dumpkeys'",
    "statusTrace" : "self = <test_rrs_admin.TestAdmin object at 0x7fa3f744e360>\n\n    @allure.title(\"Admin test\")\n    @allure.severity(\"Medium\")\n    @pytest.mark.smoke\n    def test_login(self):\n        self.rrs_admin.open()                               # открытие страницы\n        self.rrs_admin.enter_login(self.data.LOGIN_A)         # ввод логина\n        self.rrs_admin.enter_password(self.data.PASSWORD_A)   # ввод пароля\n        self.rrs_admin.click_submit_button()                # нажатие на кнопку входа\n        self.rrs_admin.drop_down_list()                     # нажатие на выпадающий список\n        self.rrs_admin.report()                             # нажатие на отчет\n        self.rrs_admin.suppliers_report()                   # выбор нужного отчета\n        self.rrs_admin.add_report()                         # создание нового отчета\n        self.rrs_admin.data_input_start('01.02.2024')           # ввод даты\n        self.rrs_admin.timer_enter_start()                  # выбор времени\n        self.rrs_admin.data_input_end('29.02.2024')          # ввод даты\n        self.rrs_admin.timer_enter_and()                    # выбор времени\n        self.rrs_admin.scrol_down()                         # скролл\n        self.rrs_admin.suppliers_all()                      # все поставщики\n        self.rrs_admin.enter_report()                       # нажатие формирование отчета\n        self.rrs_admin.spiner()                             # ожидание когда пропадёт спинер\n        self.rrs_admin.scrol_down()                         # скролл вниз\n        self.rrs_admin.make_screenshot(\"Screenshot\")\n        self.rrs_admin.export()                             # нажатие на экспорт\n>       self.rrs_admin.enter()                              # нажатие на enter\n\ntests/test_rrs_admin.py:31: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npages/admin_pg.py:114: in enter\n    keyboard.press('enter')\n../local/lib/python3.12/site-packages/keyboard/__init__.py:396: in press\n    send(hotkey, True, False)\n../local/lib/python3.12/site-packages/keyboard/__init__.py:379: in send\n    parsed = parse_hotkey(hotkey)\n../local/lib/python3.12/site-packages/keyboard/__init__.py:358: in parse_hotkey\n    steps.append(tuple(key_to_scan_codes(key) for key in keys))\n../local/lib/python3.12/site-packages/keyboard/__init__.py:358: in <genexpr>\n    steps.append(tuple(key_to_scan_codes(key) for key in keys))\n../local/lib/python3.12/site-packages/keyboard/__init__.py:317: in key_to_scan_codes\n    t = tuple(_collections.OrderedDict((scan_code, True) for scan_code, modifier in _os_keyboard.map_name(normalized)))\n../local/lib/python3.12/site-packages/keyboard/__init__.py:317: in <genexpr>\n    t = tuple(_collections.OrderedDict((scan_code, True) for scan_code, modifier in _os_keyboard.map_name(normalized)))\n../local/lib/python3.12/site-packages/keyboard/_nixkeyboard.py:148: in map_name\n    build_tables()\n../local/lib/python3.12/site-packages/keyboard/_nixkeyboard.py:73: in build_tables\n    dump = check_output(['dumpkeys', '--keys-only'], universal_newlines=True)\n../local/lib/python3.12/subprocess.py:466: in check_output\n    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n../local/lib/python3.12/subprocess.py:548: in run\n    with Popen(*popenargs, **kwargs) as process:\n../local/lib/python3.12/subprocess.py:1024: in __init__\n    self._execute_child(args, executable, preexec_fn, close_fds,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Popen: returncode: 255 args: ['dumpkeys', '--keys-only']>\nargs = ['dumpkeys', '--keys-only'], executable = b'dumpkeys', preexec_fn = None\nclose_fds = True, pass_fds = (), cwd = None, env = None, startupinfo = None\ncreationflags = 0, shell = False, p2cread = -1, p2cwrite = -1, c2pread = 7\nc2pwrite = 8, errread = -1, errwrite = -1, restore_signals = True, gid = None\ngids = None, uid = None, umask = -1, start_new_session = False\nprocess_group = -1\n\n    def _execute_child(self, args, executable, preexec_fn, close_fds,\n                       pass_fds, cwd, env,\n                       startupinfo, creationflags, shell,\n                       p2cread, p2cwrite,\n                       c2pread, c2pwrite,\n                       errread, errwrite,\n                       restore_signals,\n                       gid, gids, uid, umask,\n                       start_new_session, process_group):\n        \"\"\"Execute program (POSIX version)\"\"\"\n    \n        if isinstance(args, (str, bytes)):\n            args = [args]\n        elif isinstance(args, os.PathLike):\n            if shell:\n                raise TypeError('path-like args is not allowed when '\n                                'shell is true')\n            args = [args]\n        else:\n            args = list(args)\n    \n        if shell:\n            # On Android the default shell is at '/system/bin/sh'.\n            unix_shell = ('/system/bin/sh' if\n                      hasattr(sys, 'getandroidapilevel') else '/bin/sh')\n            args = [unix_shell, \"-c\"] + args\n            if executable:\n                args[0] = executable\n    \n        if executable is None:\n            executable = args[0]\n    \n        sys.audit(\"subprocess.Popen\", executable, args, cwd, env)\n    \n        if (_USE_POSIX_SPAWN\n                and os.path.dirname(executable)\n                and preexec_fn is None\n                and not close_fds\n                and not pass_fds\n                and cwd is None\n                and (p2cread == -1 or p2cread > 2)\n                and (c2pwrite == -1 or c2pwrite > 2)\n                and (errwrite == -1 or errwrite > 2)\n                and not start_new_session\n                and process_group == -1\n                and gid is None\n                and gids is None\n                and uid is None\n                and umask < 0):\n            self._posix_spawn(args, executable, env, restore_signals,\n                              p2cread, p2cwrite,\n                              c2pread, c2pwrite,\n                              errread, errwrite)\n            return\n    \n        orig_executable = executable\n    \n        # For transferring possible exec failure from child to parent.\n        # Data format: \"exception name:hex errno:description\"\n        # Pickle is not used; it is complex and involves memory allocation.\n        errpipe_read, errpipe_write = os.pipe()\n        # errpipe_write must not be in the standard io 0, 1, or 2 fd range.\n        low_fds_to_close = []\n        while errpipe_write < 3:\n            low_fds_to_close.append(errpipe_write)\n            errpipe_write = os.dup(errpipe_write)\n        for low_fd in low_fds_to_close:\n            os.close(low_fd)\n        try:\n            try:\n                # We must avoid complex work that could involve\n                # malloc or free in the child process to avoid\n                # potential deadlocks, thus we do all this here.\n                # and pass it to fork_exec()\n    \n                if env is not None:\n                    env_list = []\n                    for k, v in env.items():\n                        k = os.fsencode(k)\n                        if b'=' in k:\n                            raise ValueError(\"illegal environment variable name\")\n                        env_list.append(k + b'=' + os.fsencode(v))\n                else:\n                    env_list = None  # Use execv instead of execve.\n                executable = os.fsencode(executable)\n                if os.path.dirname(executable):\n                    executable_list = (executable,)\n                else:\n                    # This matches the behavior of os._execvpe().\n                    executable_list = tuple(\n                        os.path.join(os.fsencode(dir), executable)\n                        for dir in os.get_exec_path(env))\n                fds_to_keep = set(pass_fds)\n                fds_to_keep.add(errpipe_write)\n                self.pid = _fork_exec(\n                        args, executable_list,\n                        close_fds, tuple(sorted(map(int, fds_to_keep))),\n                        cwd, env_list,\n                        p2cread, p2cwrite, c2pread, c2pwrite,\n                        errread, errwrite,\n                        errpipe_read, errpipe_write,\n                        restore_signals, start_new_session,\n                        process_group, gid, gids, uid, umask,\n                        preexec_fn, _USE_VFORK)\n                self._child_created = True\n            finally:\n                # be sure the FD is closed no matter what\n                os.close(errpipe_write)\n    \n            self._close_pipe_fds(p2cread, p2cwrite,\n                                 c2pread, c2pwrite,\n                                 errread, errwrite)\n    \n            # Wait for exec to fail or succeed; possibly raising an\n            # exception (limited in size)\n            errpipe_data = bytearray()\n            while True:\n                part = os.read(errpipe_read, 50000)\n                errpipe_data += part\n                if not part or len(errpipe_data) > 50000:\n                    break\n        finally:\n            # be sure the FD is closed no matter what\n            os.close(errpipe_read)\n    \n        if errpipe_data:\n            try:\n                pid, sts = os.waitpid(self.pid, 0)\n                if pid == self.pid:\n                    self._handle_exitstatus(sts)\n                else:\n                    self.returncode = sys.maxsize\n            except ChildProcessError:\n                pass\n    \n            try:\n                exception_name, hex_errno, err_msg = (\n                        errpipe_data.split(b':', 2))\n                # The encoding here should match the encoding\n                # written in by the subprocess implementations\n                # like _posixsubprocess\n                err_msg = err_msg.decode()\n            except ValueError:\n                exception_name = b'SubprocessError'\n                hex_errno = b'0'\n                err_msg = 'Bad exception data from child: {!r}'.format(\n                              bytes(errpipe_data))\n            child_exception_type = getattr(\n                    builtins, exception_name.decode('ascii'),\n                    SubprocessError)\n            if issubclass(child_exception_type, OSError) and hex_errno:\n                errno_num = int(hex_errno, 16)\n                child_exec_never_called = (err_msg == \"noexec\")\n                if child_exec_never_called:\n                    err_msg = \"\"\n                    # The error must be from chdir(cwd).\n                    err_filename = cwd\n                else:\n                    err_filename = orig_executable\n                if errno_num != 0:\n                    err_msg = os.strerror(errno_num)\n>               raise child_exception_type(errno_num, err_msg, err_filename)\nE               FileNotFoundError: [Errno 2] No such file or directory: 'dumpkeys'\n\n../local/lib/python3.12/subprocess.py:1901: FileNotFoundError",
    "steps" : [ {
      "name" : "Open http://raros3.ultra-production.ru/admin page",
      "time" : {
        "start" : 1709543077004,
        "stop" : 1709543078169,
        "duration" : 1165
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "stepsCount" : 0,
      "hasContent" : false
    }, {
      "name" : "Enter login",
      "time" : {
        "start" : 1709543078169,
        "stop" : 1709543078220,
        "duration" : 51
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ {
        "name" : "login",
        "value" : "'garpixadmin'"
      } ],
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "stepsCount" : 0,
      "hasContent" : true
    }, {
      "name" : "Enter password",
      "time" : {
        "start" : 1709543078221,
        "stop" : 1709543078279,
        "duration" : 58
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ {
        "name" : "password",
        "value" : "'4HA65rdTmGrLswHf'"
      } ],
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "stepsCount" : 0,
      "hasContent" : true
    }, {
      "name" : "Click on submit button",
      "time" : {
        "start" : 1709543078279,
        "stop" : 1709543080534,
        "duration" : 2255
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "stepsCount" : 0,
      "hasContent" : false
    }, {
      "name" : "Drop down list",
      "time" : {
        "start" : 1709543080535,
        "stop" : 1709543080576,
        "duration" : 41
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "stepsCount" : 0,
      "hasContent" : false
    }, {
      "name" : "Reports",
      "time" : {
        "start" : 1709543080577,
        "stop" : 1709543081328,
        "duration" : 751
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "stepsCount" : 0,
      "hasContent" : false
    }, {
      "name" : "Suppliers report",
      "time" : {
        "start" : 1709543081328,
        "stop" : 1709543082695,
        "duration" : 1367
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "stepsCount" : 0,
      "hasContent" : false
    }, {
      "name" : "Add report",
      "time" : {
        "start" : 1709543082695,
        "stop" : 1709543083796,
        "duration" : 1101
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "stepsCount" : 0,
      "hasContent" : false
    }, {
      "name" : "Data input start",
      "time" : {
        "start" : 1709543083796,
        "stop" : 1709543083852,
        "duration" : 56
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ {
        "name" : "data_start",
        "value" : "'01.02.2024'"
      } ],
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "stepsCount" : 0,
      "hasContent" : true
    }, {
      "name" : "Timer enter start",
      "time" : {
        "start" : 1709543083852,
        "stop" : 1709543083908,
        "duration" : 56
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "stepsCount" : 0,
      "hasContent" : false
    }, {
      "name" : "Data input end",
      "time" : {
        "start" : 1709543083908,
        "stop" : 1709543083964,
        "duration" : 56
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ {
        "name" : "data_and",
        "value" : "'29.02.2024'"
      } ],
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "stepsCount" : 0,
      "hasContent" : true
    }, {
      "name" : "Timer enter end",
      "time" : {
        "start" : 1709543083964,
        "stop" : 1709543084009,
        "duration" : 45
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "stepsCount" : 0,
      "hasContent" : false
    }, {
      "name" : "Scrol http://raros3.ultra-production.ru/admin page",
      "time" : {
        "start" : 1709543084009,
        "stop" : 1709543084012,
        "duration" : 3
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "stepsCount" : 0,
      "hasContent" : false
    }, {
      "name" : "Suppliers all",
      "time" : {
        "start" : 1709543084012,
        "stop" : 1709543084076,
        "duration" : 64
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "stepsCount" : 0,
      "hasContent" : false
    }, {
      "name" : "Enter report",
      "time" : {
        "start" : 1709543084076,
        "stop" : 1709543085387,
        "duration" : 1311
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "stepsCount" : 0,
      "hasContent" : false
    }, {
      "name" : "Spiner",
      "time" : {
        "start" : 1709543085388,
        "stop" : 1709543101697,
        "duration" : 16309
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "stepsCount" : 0,
      "hasContent" : false
    }, {
      "name" : "Scrol http://raros3.ultra-production.ru/admin page",
      "time" : {
        "start" : 1709543101697,
        "stop" : 1709543101700,
        "duration" : 3
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "stepsCount" : 0,
      "hasContent" : false
    }, {
      "name" : "Export report",
      "time" : {
        "start" : 1709543101887,
        "stop" : 1709543101948,
        "duration" : 61
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "stepsCount" : 0,
      "hasContent" : false
    }, {
      "name" : "Click enter",
      "time" : {
        "start" : 1709543101948,
        "stop" : 1709543101949,
        "duration" : 1
      },
      "status" : "broken",
      "statusMessage" : "FileNotFoundError: [Errno 2] No such file or directory: 'dumpkeys'\n",
      "statusTrace" : "  File \"/usr/local/lib/python3.12/site-packages/allure_commons/_allure.py\", line 192, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"/usr/workspace/pages/admin_pg.py\", line 114, in enter\n    keyboard.press('enter')\n  File \"/usr/local/lib/python3.12/site-packages/keyboard/__init__.py\", line 396, in press\n    send(hotkey, True, False)\n  File \"/usr/local/lib/python3.12/site-packages/keyboard/__init__.py\", line 379, in send\n    parsed = parse_hotkey(hotkey)\n             ^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.12/site-packages/keyboard/__init__.py\", line 358, in parse_hotkey\n    steps.append(tuple(key_to_scan_codes(key) for key in keys))\n                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.12/site-packages/keyboard/__init__.py\", line 358, in <genexpr>\n    steps.append(tuple(key_to_scan_codes(key) for key in keys))\n                       ^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.12/site-packages/keyboard/__init__.py\", line 317, in key_to_scan_codes\n    t = tuple(_collections.OrderedDict((scan_code, True) for scan_code, modifier in _os_keyboard.map_name(normalized)))\n              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.12/site-packages/keyboard/__init__.py\", line 317, in <genexpr>\n    t = tuple(_collections.OrderedDict((scan_code, True) for scan_code, modifier in _os_keyboard.map_name(normalized)))\n                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.12/site-packages/keyboard/_nixkeyboard.py\", line 148, in map_name\n    build_tables()\n  File \"/usr/local/lib/python3.12/site-packages/keyboard/_nixkeyboard.py\", line 73, in build_tables\n    dump = check_output(['dumpkeys', '--keys-only'], universal_newlines=True)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.12/subprocess.py\", line 466, in check_output\n    return run(*popenargs, stdout=PIPE, timeout=timeout, check=True,\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.12/subprocess.py\", line 548, in run\n    with Popen(*popenargs, **kwargs) as process:\n         ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.12/subprocess.py\", line 1024, in __init__\n    self._execute_child(args, executable, preexec_fn, close_fds,\n  File \"/usr/local/lib/python3.12/subprocess.py\", line 1901, in _execute_child\n    raise child_exception_type(errno_num, err_msg, err_filename)\n",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : true,
      "stepsCount" : 0,
      "hasContent" : true
    } ],
    "attachments" : [ {
      "uid" : "e5e2efe498288c3c",
      "name" : "Screenshot",
      "source" : "e5e2efe498288c3c.png",
      "type" : "image/png",
      "size" : 71962
    } ],
    "parameters" : [ ],
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : true,
    "stepsCount" : 19,
    "hasContent" : true
  },
  "afterStages" : [ {
    "name" : "driver::0",
    "time" : {
      "start" : 1709543102065,
      "stop" : 1709543102152,
      "duration" : 87
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "stepsCount" : 0,
    "hasContent" : false
  } ],
  "labels" : [ {
    "name" : "severity",
    "value" : "Medium"
  }, {
    "name" : "feature",
    "value" : "Admin"
  }, {
    "name" : "tag",
    "value" : "smoke"
  }, {
    "name" : "parentSuite",
    "value" : "tests"
  }, {
    "name" : "suite",
    "value" : "test_rrs_admin"
  }, {
    "name" : "subSuite",
    "value" : "TestAdmin"
  }, {
    "name" : "host",
    "value" : "7ad8d37d03f1"
  }, {
    "name" : "thread",
    "value" : "1-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "tests.test_rrs_admin"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Test defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "tags" : [ "smoke" ]
  },
  "source" : "bb892292f3376cee.json",
  "parameterValues" : [ ]
}